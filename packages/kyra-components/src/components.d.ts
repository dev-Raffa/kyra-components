/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CwCarousel {
        /**
          * if this value is true, a button prev element and a button next element will be shown in the sides of carousel
         */
        "arrows"?: boolean;
        /**
          * if this value is true the elments will be changed automatically in the interval defined
         */
        "autoplay"?: boolean;
        /**
          * set the colors controls carousel
         */
        "colors": string;
        /**
          * set the carousel height
         */
        "height": string;
        /**
          * if this value is true, a section with control indices of elements will be shown at the bottom of the carousel
         */
        "index"?: boolean;
        /**
          * set the interval for altomatically changing the elements
         */
        "time"?: number;
        /**
          * set the carousel width
         */
        "width": string;
    }
    interface CwDraggable {
        "bgColor": string;
        "border": string;
        "gap": string;
        "height": string;
        "itemTitle": string;
        "itemsDirection": string;
        "transition": string;
        "width": string;
    }
    interface CwDraggableBoard {
        "itemTitle": string;
    }
    interface CwPopover {
        "content": string;
        "margin": string;
        "title": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface CwPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwPopoverElement;
}
declare global {
    interface HTMLCwCarouselElement extends Components.CwCarousel, HTMLStencilElement {
    }
    var HTMLCwCarouselElement: {
        prototype: HTMLCwCarouselElement;
        new (): HTMLCwCarouselElement;
    };
    interface HTMLCwDraggableElement extends Components.CwDraggable, HTMLStencilElement {
    }
    var HTMLCwDraggableElement: {
        prototype: HTMLCwDraggableElement;
        new (): HTMLCwDraggableElement;
    };
    interface HTMLCwDraggableBoardElement extends Components.CwDraggableBoard, HTMLStencilElement {
    }
    var HTMLCwDraggableBoardElement: {
        prototype: HTMLCwDraggableBoardElement;
        new (): HTMLCwDraggableBoardElement;
    };
    interface HTMLCwPopoverElementEventMap {
        "cwPopoverShown": void;
        "cwPopoverHidden": void;
    }
    interface HTMLCwPopoverElement extends Components.CwPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCwPopoverElementEventMap>(type: K, listener: (this: HTMLCwPopoverElement, ev: CwPopoverCustomEvent<HTMLCwPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCwPopoverElementEventMap>(type: K, listener: (this: HTMLCwPopoverElement, ev: CwPopoverCustomEvent<HTMLCwPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCwPopoverElement: {
        prototype: HTMLCwPopoverElement;
        new (): HTMLCwPopoverElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "cw-carousel": HTMLCwCarouselElement;
        "cw-draggable": HTMLCwDraggableElement;
        "cw-draggable-board": HTMLCwDraggableBoardElement;
        "cw-popover": HTMLCwPopoverElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface CwCarousel {
        /**
          * if this value is true, a button prev element and a button next element will be shown in the sides of carousel
         */
        "arrows"?: boolean;
        /**
          * if this value is true the elments will be changed automatically in the interval defined
         */
        "autoplay"?: boolean;
        /**
          * set the colors controls carousel
         */
        "colors"?: string;
        /**
          * set the carousel height
         */
        "height"?: string;
        /**
          * if this value is true, a section with control indices of elements will be shown at the bottom of the carousel
         */
        "index"?: boolean;
        /**
          * set the interval for altomatically changing the elements
         */
        "time"?: number;
        /**
          * set the carousel width
         */
        "width"?: string;
    }
    interface CwDraggable {
        "bgColor"?: string;
        "border"?: string;
        "gap"?: string;
        "height"?: string;
        "itemTitle"?: string;
        "itemsDirection"?: string;
        "transition"?: string;
        "width"?: string;
    }
    interface CwDraggableBoard {
        "itemTitle"?: string;
    }
    interface CwPopover {
        "content"?: string;
        "margin"?: string;
        "onCwPopoverHidden"?: (event: CwPopoverCustomEvent<void>) => void;
        "onCwPopoverShown"?: (event: CwPopoverCustomEvent<void>) => void;
        "title"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "cw-carousel": CwCarousel;
        "cw-draggable": CwDraggable;
        "cw-draggable-board": CwDraggableBoard;
        "cw-popover": CwPopover;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cw-carousel": LocalJSX.CwCarousel & JSXBase.HTMLAttributes<HTMLCwCarouselElement>;
            "cw-draggable": LocalJSX.CwDraggable & JSXBase.HTMLAttributes<HTMLCwDraggableElement>;
            "cw-draggable-board": LocalJSX.CwDraggableBoard & JSXBase.HTMLAttributes<HTMLCwDraggableBoardElement>;
            "cw-popover": LocalJSX.CwPopover & JSXBase.HTMLAttributes<HTMLCwPopoverElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
